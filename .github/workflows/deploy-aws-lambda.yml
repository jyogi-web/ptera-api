# This is a basic workflow to help you get started with Actions

name: Deploy to AWS lambda

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    types: [opened, reopened, synchronize]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-test
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-test

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
          components: rustfmt, clippy

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --all-features

  build-deploy:
    if: ${{ github.event_name == 'push' }}
    needs: [test]
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-build-deploy
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-build-deploy

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Install zig
        run: npm install -g @ziglang/cli

      - name: Install lambda
        if: steps.cache-build-deploy.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-lambda

      - name: Lambda build
        uses: actions-rs/cargo@v1
        with:
          command: lambda
          args: build --release --arm64

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Decode secret file .env
        env:
          DOTENV_ENCODED: ${{ secrets.DOTENV_ENCODED }}
        run: echo $DOTENV_ENCODED | base64 --decode > .env

      - name: Lambda deploy
        uses: actions-rs/cargo@v1
        with:
          command: lambda
          args: deploy --iam-role ${{ secrets.IAM }} --env-file .env --enable-function-url

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.0
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false
          body: ${{ steps.tag_version.outputs.changelog }}
